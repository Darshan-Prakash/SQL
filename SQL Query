create database IF NOT EXISTS E_COMMERCE
USE E_COMMERCE
 
--Traffic source analysis
--1.1 Identifying the major traffic sources
SELECT
    utm_source,
    utm_campaign,
    COUNT(DISTINCT website_session_id) AS sessions
FROM website_sessions
GROUP BY 1,2
ORDER BY 3 DESC;

 --1.2Traffic to order conversion
 SELECT
    website_sessions.utm_source,
    website_sessions.utm_campaign,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) session_order_CVR
FROM website_sessions LEFT JOIN orders on website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
ORDER BY 5 DESC;


--2. Website performance and analysis
--website pages sessions comparision

SELECT
pageview_url,
COUNT(DISTINCT website_session_id) as sessions
FROM website_pageviews
WHERE pageview_url IN ('/home','/products','/cart','/shipping','/billing')
GROUP BY pageview_url
ORDER BY sessions DESC;


 --A/B testing with a new lander page
-- A new website page with the name ‘lander-1’ was added to the website on June 19, 2012. A full conversation funnel is analyzed between the home page and the new lander-1 page between June 19, 2012 and July 28, 2012.
 
CREATE TEMPORARY TABLE view_analysis
SELECT
    website_session_id, 
    MAX(homepage) AS saw_homepage,
    MAX(custom_lander) AS saw_custom_lander,
    MAX(products_page) AS saw_products,
    MAX(cart_page) AS saw_cart,
    MAX(shipping_page) AS saw_shipping,
    MAX(billing_page) AS saw_billing,
    MAX(thankyou_page) AS saw_thankyou
FROM(
SELECT
    website_sessions.website_session_id,
    website_pageviews.pageview_url,
    CASE WHEN pageview_url ='/home' THEN 1 ELSE 0 END AS homepage,
    CASE WHEN pageview_url ='/lander-1' THEN 1 ELSE 0 END AS custom_lander,
    CASE WHEN pageview_url ='/products' THEN 1 ELSE 0 END AS products_page,
    CASE WHEN pageview_url ='/cart' THEN 1 ELSE 0 END AS cart_page,
    CASE WHEN pageview_url ='/shipping' THEN 1 ELSE 0 END AS shipping_page,
    CASE WHEN pageview_url ='/billing' THEN 1 ELSE 0 END AS billing_page,
    CASE WHEN pageview_url ='/thank-you-for-your-order' THEN 1 ELSE 0 END AS thankyou_page
FROM
    website_sessions LEFT JOIN website_pageviews ON website_sessions.website_session_id = website_pageviews.website_session_id
WHERE website_sessions.created_at < '2012-07-28'
    AND website_sessions.created_at > '2012-06-19'
ORDER BY 
    website_sessions.website_session_id
    ) AS preview_level
GROUP BY website_sessions.website_session_id;

SELECT
CASE
WHEN saw_homepage = 1 THEN 'saw_homepage'
WHEN saw_custom_lander = 1 THEN 'saw_custom_lander'
ELSE 'opps..logic?'
END AS segment,
    COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN saw_products = 1 THEN website_session_id ELSE NULL END) AS to_products,
    COUNT(DISTINCT CASE WHEN saw_cart = 1 THEN website_session_id ELSE NULL END) AS to_cart,
    COUNT(DISTINCT CASE WHEN saw_shipping = 1 THEN website_session_id ELSE NULL END) AS to_shipping,
    COUNT(DISTINCT CASE WHEN saw_billing = 1 THEN website_session_id ELSE NULL END) AS to_billing,
    COUNT(DISTINCT CASE WHEN saw_thankyou = 1 THEN website_session_id ELSE NULL END) AS to_thankyou,
    COUNT(DISTINCT CASE WHEN saw_thankyou = 1 THEN website_session_id ELSE NULL END)/COUNT(DISTINCT CASE WHEN saw_products = 1 THEN website_session_id ELSE NULL END) AS product_to_thankyou_CVR
FROM view_analysis
GROUP BY 1
ORDER BY product_to_thankyou_CVR DESC;



--Business patterns and analyzing seasonality

--3.1 Analyzing quarterly session to order conversation rate, revenue per order and revenue per session
SELECT
YEAR(website_sessions.created_at) AS yr,
    QUARTER(website_sessions.created_at) AS qtr,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_CVR,
    ROUND(SUM(price_usd)/COUNT(DISTINCT orders.order_id),2) AS revenue_per_order,
    ROUND(SUM(price_usd)/COUNT(DISTINCT website_sessions.website_session_id),2) AS revenue_per_session
FROM
    website_sessions LEFT JOIN orders ON website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
ORDER BY 1,2;


--3.2 Analyzing revenue by product and seasonality
SELECT
    YEAR(created_at) AS yr,
    MONTH(created_at) AS mo,
    SUM(CASE WHEN product_id = 1 THEN price_usd ELSE NULL END) AS mrfuzzy_rev,
    SUM(CASE WHEN product_id = 2 THEN price_usd ELSE NULL END) AS lovebear_rev,
    SUM(CASE WHEN product_id = 3 THEN price_usd ELSE NULL END) AS birthdaybear_rev,
    SUM(CASE WHEN product_id = 4 THEN price_usd ELSE NULL END) AS minibear_rev,
    SUM(price_usd) AS total_revenue,
    SUM(price_usd - cogs_usd) AS total_margin
FROM order_items
GROUP BY 1,2
ORDER BY 1,2;

--3Company's yearly growth in revenue

SELECT
    yr,
    mrfuzzy_rev,
    lovebear_rev,
    birthdaybear_rev,
    minibear_rev,
    total_revenue,
    total_margin
FROM (
    SELECT
        YEAR(created_at) AS yr,
        MONTH(created_at) AS mo,
        SUM(CASE WHEN product_id = 1 THEN price_usd ELSE NULL END) AS mrfuzzy_rev,
        SUM(CASE WHEN product_id = 2 THEN price_usd ELSE NULL END) AS lovebear_rev,
        SUM(CASE WHEN product_id = 3 THEN price_usd ELSE NULL END) AS birthdaybear_rev,
        SUM(CASE WHEN product_id = 4 THEN price_usd ELSE NULL END) AS minibear_rev,
        SUM(price_usd) AS total_revenue,
        SUM(price_usd - cogs_usd) AS total_margin
    
    FROM order_items
    GROUP BY 1,2
    ORDER BY 1,2
)AS revenue_by_product

GROUP BY 1;
